@page
@model ResultModel
@{
    ViewData["Title"] = "Calculation Result";
}

<h1>Calculation Results</h1>

<div class="accordion" id="accordionResult">
    @for (int i = 0; i < Model.OfficialFeeResults.Count(); i++)
    {
        var fr = Model.OfficialFeeResults[i];

        <div class="accordion-item">
            <h2 class="accordion-header" id="@($"heading-{i}")">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@($"collapse-{i}")" aria-expanded="true" aria-controls="@($"collapse-{i}")">
                    Accordion Item #@(i)
                </button>
            </h2>
            <div id="@($"collapse-{i}")" class="accordion-collapse collapse" aria-labelledby="@($"heading-{i}")" data-bs-parent="#accordionResult">
                <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
    }
</div>











@*
<div class="row">
    <div class="col-md-4">
        <h4>Total: @((Model.TotalMandatoryAmount + Model.TotalOptionalAmount).ToString("0.00"))</h4>
    </div>
    <div class="col-md-8">
        <h6>Mandatory Fees: @Model.TotalMandatoryAmount.ToString("0.00") | Optional Fees: @Model.TotalOptionalAmount.ToString("0.00")</h6>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.ComputationError))
{
    <div class="alert alert-danger" role="alert">
        @Model.ComputationError
    </div>
}

@if (Model.CollectedValues != null)
{
    var i = 1;
    <table class="table table-sm">
        <thead>
            <tr>
                <th rowspan="2">Collected Values</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cv in Model.CollectedValues)
            {
                <tr>
                    <td>@i</td>
                    <td>@cv.ToString()</td>
                </tr>
                i++;
            }
        </tbody>
    </table>
}

@if (Model.CalculationSteps != null)
{
    var i = 1;
    <table class="table table-sm">
        <thead>
            <tr>
                <th rowspan="2">Calculation Steps</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in Model.CalculationSteps)
            {
                <tr>
                    <td>@i</td>
                    <td>@e</td>
                </tr>
                i++;
            }
        </tbody>
    </table>
}

@if (Model.Returns != null)
{
    var i = 1;
    <table class="table table-sm">
        <thead>
            <tr>
                <th rowspan="2">Returns</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in Model.Returns)
            {
                <tr>
                    <td>@i</td>
                    <td>@e.Item1</td>
                    <td>@e.Item2</td>
                </tr>
                i++;
            }
        </tbody>
    </table>
}*@